{"version":3,"sources":["Clock.js","App.js","serviceWorker.js","index.js"],"names":["Clock","useState","timer","setTimer","isActive","setIsActive","minute","Math","floor","second","useEffect","interval","setInterval","clearInterval","id","onClick","className","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wRAiEeA,MA7Df,WACE,IADe,EAEWC,mBADF,MADT,mBAERC,EAFQ,KAEDC,EAFC,OAGiBF,oBAAS,GAH1B,mBAGRG,EAHQ,KAGEC,EAHF,KAIXC,EAASC,KAAKC,MAAMN,EAAK,KACzBO,EAASF,KAAKC,MAAON,EAAK,IAAkB,KAoChD,OAhBAQ,qBAAU,WACR,IAAIC,EAAW,KAWf,OAVIP,GAAYF,GAAS,IACvBS,EAAWC,aAAY,WACrBT,EAASD,EAAQ,OAChB,MAEDA,EAAQ,IACVW,cAAcF,GACdN,GAAY,GACZF,EAlCoB,OAoCf,WACLU,cAAcF,MAEf,CAACP,EAAUF,EAvCU,OAyCtB,6BACE,8CACA,yBAAKY,GAAG,SACN,0BAAMC,QA9BZ,WACEZ,EAASD,EAAQ,OA8BX,uBAAGc,UAAU,oBAEf,0BAAMD,QA9BZ,WACE,KAAIb,EAAQ,KAGV,OAAO,IAFPC,EAASD,EAAQ,OA6Bb,uBAAGc,UAAU,uBAGjB,yBAAKF,GAAG,SACLR,EADH,MACcG,EAAS,GAAT,WAAkBA,GAAlB,UAAgCA,IAE9C,4BAAQM,QAjDZ,WACEV,GAAaD,MAgD4B,IAAbA,EAAoB,QAAU,SACxD,4BAAQW,QA/CZ,WACEZ,EATsB,MAUtBG,EAASC,KAAKC,MAAMN,EAAK,KACzBO,EAASF,KAAKC,MAAON,EAAK,IAAkB,KAC5CG,GAAY,KA2CV,WC9CSY,MAVf,WACI,OACI,yBAAKD,UAAU,OACX,8CAEA,kBAAC,EAAD,QCGQE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.990e177b.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n// import useInterval from './useInterval';\r\nimport './Clock.css';\r\n\r\nfunction Clock() {\r\n  const initialInterval = 25 * 1000 * 60;\r\n  const [timer, setTimer] = useState(initialInterval);\r\n  const [isActive, setIsActive] = useState(false);\r\n  var minute = Math.floor(timer / (1000 * 60));\r\n  var second = Math.floor((timer % (1000 * 60)) / 1000);\r\n  function toggle() {\r\n    setIsActive(!isActive);\r\n  }\r\n  function reset() {\r\n    setTimer(initialInterval);\r\n    minute = Math.floor(timer / (1000 * 60));\r\n    second = Math.floor((timer % (1000 * 60)) / 1000);\r\n    setIsActive(false);\r\n  }\r\n  function addTimer() {\r\n    setTimer(timer + 60000);\r\n  }\r\n  function subtractTimer() {\r\n    if (timer > 60000) {\r\n      setTimer(timer - 60000);\r\n    } else {\r\n      return 60000;\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    let interval = null;\r\n    if (isActive && timer >= 0) {\r\n      interval = setInterval(() => {\r\n        setTimer(timer - 1000);\r\n      }, 1000);\r\n    }\r\n    if (timer < 0) {\r\n      clearInterval(interval);\r\n      setIsActive(false);\r\n      setTimer(initialInterval);\r\n    }\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, [isActive, timer, initialInterval]);\r\n  return (\r\n    <div>\r\n      <h2>Session Length</h2>\r\n      <div id='count'>\r\n        <span onClick={addTimer}>\r\n          <i className='fa fa-arrow-up'></i>\r\n        </span>\r\n        <span onClick={subtractTimer}>\r\n          <i className='fa fa-arrow-down'></i>\r\n        </span>\r\n      </div>\r\n      <div id='clock'>\r\n        {minute} : {second < 10 ? `0${second}` : `${second}`}\r\n      </div>\r\n      <button onClick={toggle}>{isActive === true ? 'pause' : 'start'}</button>\r\n      <button onClick={reset}>reset</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Clock;\r\n","import React from 'react';\nimport './App.css';\nimport Clock from './Clock';\n\nfunction App() {\n    return (\n        <div className='App'>\n            <h1>Pomodoro Clock</h1>\n\n            <Clock />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}